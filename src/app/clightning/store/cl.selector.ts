import { createFeatureSelector, createSelector } from '@ngrx/store';
import { CLState } from './cl.state';

export const clState = createFeatureSelector<CLState>('cl');
export const clNodeSettings = createSelector(clState, (state: CLState) => state.nodeSettings);
export const clNodeInformation = createSelector(clState, (state: CLState) => state.information);
export const apiCallStatusNodeInfo = createSelector(clState, (state: CLState) => state.apiCallStatus.FetchInfo);
export const allAPIsCallStatus = createSelector(clState, (state: CLState) => state.apiCallStatus);
export const payments = createSelector(clState, (state: CLState) => ({ payments: state.payments, apiCallStatus: state.apiCallStatus.FetchPayments }));
export const peers = createSelector(clState, (state: CLState) => ({ peers: state.peers, apiCallStatus: state.apiCallStatus.FetchPeers }));
export const fees = createSelector(clState, (state: CLState) => ({ fees: state.fees, apiCallStatus: state.apiCallStatus.FetchFees }));
export const feeRatesPerKB = createSelector(clState, (state: CLState) => ({ feeRatesPerKB: state.feeRatesPerKB, apiCallStatus: state.apiCallStatus.FetchFeeRatesperkb }));
export const feeRatesPerKW = createSelector(clState, (state: CLState) => ({ feeRatesPerKW: state.feeRatesPerKW, apiCallStatus: state.apiCallStatus.FetchFeeRatesperkw }));
export const listInvoices = createSelector(clState, (state: CLState) => ({ listInvoices: state.invoices, apiCallStatus: state.apiCallStatus.FetchInvoices }));
export const utxos = createSelector(clState, (state: CLState) => ({ utxos: state.utxos, apiCallStatus: state.apiCallStatus.FetchUTXOs }));
export const channels = createSelector(clState, (state: CLState) => ({ channels: state.allChannels, apiCallStatus: state.apiCallStatus.FetchChannels }));
export const balance = createSelector(clState, (state: CLState) => ({ balance: state.balance, apiCallStatus: state.apiCallStatus.FetchBalance }));
export const localRemoteBalance = createSelector(clState, (state: CLState) => ({ localRemoteBalance: state.localRemoteBalance, apiCallStatus: state.apiCallStatus.FetchLocalRemoteBalance }));
export const forwardingHistory = createSelector(clState, (state: CLState) => ({ forwardingHistory: state.forwardingHistory, apiCallStatus: state.apiCallStatus.GetForwardingHistory }));
export const failedForwardingHistory = createSelector(clState, (state: CLState) => ({ failedForwardingHistory: state.failedForwardingHistory, apiCallStatus: state.apiCallStatus.GetFailedForwardingHistory }));
export const nodeInfoAndNodeSettingsAndBalance = createSelector(clState, (state: CLState) => ({ information: state.information, nodeSettings: state.nodeSettings, balance: state.balance }));
export const nodeInfoAndBalanceAndNumPeers = createSelector(clState, (state: CLState) => ({ information: state.information, balance: state.balance, numPeers: state.peers.length }));
export const nodeInfoAndBalance = createSelector(clState, (state: CLState) => ({ information: state.information, balance: state.balance }));
export const nodeInfoAndNodeSettingsAndAPIsStatus = createSelector(clState, (state: CLState) => ({ information: state.information, nodeSettings: state.nodeSettings, apisCallStatus: [state.apiCallStatus.FetchInfo, state.apiCallStatus.FetchLocalRemoteBalance, state.apiCallStatus.FetchChannels, state.apiCallStatus.GetForwardingHistory] }));
